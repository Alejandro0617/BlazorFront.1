@page "/aliado"
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="container-xl mt-4">
    <div class="table-responsive">
        <div class="table-wrapper shadow-lg p-4 rounded">
            <div class="table-title bg-dark text-white p-3 rounded">
                <div class="row">
                    <div class="col-sm-6">
                        <h2 class="m-0">Gestionar <b>Aliados</b></h2>
                    </div>
                    <div class="col-sm-6 text-end">
                        <a href="#addModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Aliado</span>
                        </a>
                        <a href="#consultarModal" class="btn btn-info" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Aliado</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (listado == null)
            {
                <p class="text-center">Cargando...</p>
            }
            else if (!listado.Any())
            {
                <p class="text-center">No hay aliados registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover mt-3">
                    <thead class="table-secondary">
                        <tr>
                            <th>Nit</th>
                            <th>Razón Social</th>
                            <th>Nombre Contacto</th>
                            <th>Correo</th>
                            <th>Teléfono</th>
                            <th>Ciudad</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado)
                        {
                            <tr>
                                <td>@sele["nit"]</td>
                                <td>@sele["razon_social"]</td>
                                <td>@sele["nombre_contacto"]</td>
                                <td>@sele["correo"]</td>
                                <td>@sele["telefono"]</td>
                                <td>@sele["ciudad"]</td>
                                <td>
                                    <a href="#editModal" class="edit text-warning" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#deleteModal" class="delete text-danger" data-bs-toggle="modal" @onclick="() => SetSeleToDelete(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para añadir/editar -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSele" OnValidSubmit="SaveSele">
                <DataAnnotationsValidator />
                <div class="modal-header bg-dark text-white">
                    <h5 class="modal-title" id="addModalLabel">@(isNewSele ? "Añadir" : "Editar") Aliado</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label>Nit</label>
                        <InputNumber class="form-control" @bind-Value="nit" />
                        <ValidationMessage For="@(() => nit)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Razón Social</label>
                        <InputText class="form-control" @bind-Value="razon_social" />
                        <ValidationMessage For="@(() => razon_social)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Nombre Contacto</label>
                        <InputText class="form-control" @bind-Value="nombre_contacto" />
                        <ValidationMessage For="@(() => nombre_contacto)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Correo</label>
                        <InputText class="form-control" @bind-Value="correo" />
                        <ValidationMessage For="@(() => correo)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Teléfono</label>
                        <InputText class="form-control" @bind-Value="telefono" />
                        <ValidationMessage For="@(() => telefono)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Ciudad</label>
                        <InputText class="form-control" @bind-Value="ciudad" />
                        <ValidationMessage For="@(() => ciudad)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">@(isNewSele ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para eliminar -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Aliado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este aliado?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSele">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para consultar -->
<div class="modal fade" id="consultarModal" tabindex="-1" role="dialog" aria-labelledby="consultarModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="consultarModalLabel">Consultar Aliado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label>Nit</label>
                    <input type="text" class="form-control" @bind="consultaNit" @bind:event="oninput" />
                </div>
                <div class="form-group mb-3">
                    <label>Razón Social</label>
                    <input type="text" class="form-control" @bind="consultaRS" readonly />
                </div>
                <div class="form-group mb-3">
                    <label>Nombre Contacto</label>
                    <input type="text" class="form-control" @bind="consultaNC" readonly />
                </div>
                <div class="form-group mb-3">
                    <label>Correo</label>
                    <input type="text" class="form-control" @bind="consultaCorreo" readonly />
                </div>
                <div class="form-group mb-3">
                    <label>Teléfono</label>
                    <input type="text" class="form-control" @bind="consultaTelefono" readonly />
                </div>
                <div class="form-group mb-3">
                    <label>Ciudad</label>
                    <input type="text" class="form-control" @bind="consultaCiudad" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSele">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSeleConsultada" disabled="@(!seleEncontrada)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSeleConsultada" disabled="@(!seleEncontrada)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
    }
    
    .table-wrapper {
        border-radius: 0.5rem;
        background-color: #fff;
    }

    .table-title h2 {
        font-size: 24px;
        font-weight: bold;
    }

    .modal-header {
        border-bottom: none;
    }

    .modal-header .btn-close {
        box-shadow: none;
    }

    .btn-close:focus {
        outline: none;
    }

    input[type="text"], input[type="number"] {
        border-radius: 0.25rem;
    }
</style>

@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;

    <!-- CAMBIAR EN CADA TABLA -->
    private int nit;
    private string razon_social = "";
    private string nombre_contacto = "";
    private string correo = "";
    private string telefono = "";
    private string ciudad = "";

    private string consultaNit = "";
    private string consultaRS = "";
    private string consultaNC = "";
    private string consultaCorreo = "";
    private string consultaTelefono = "";
    private string consultaCiudad = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/aliado");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar aliados: {ex.Message}");
            Console.WriteLine($"Error al cargar alidos: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar aliados: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        nit = currentSele.TryGetValue("nit", out var i) ? Convert.ToInt32(i) : 0;
        razon_social = currentSele.TryGetValue("razon_social", out var n) ? n?.ToString() ?? "" : "";
        nombre_contacto = currentSele.TryGetValue("nombre_contacto", out var o) ? o?.ToString() ?? "" : "";
        correo = currentSele.TryGetValue("correo", out var u) ? u?.ToString() ?? "" : "";
        telefono = currentSele.TryGetValue("telefono", out var p) ? p?.ToString() ?? "" : "";
        ciudad = currentSele.TryGetValue("ciudad", out var l) ? l?.ToString() ?? "" : "";
        <!-- FIN -->
       
        JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consultaNit = "";
        consultaRS = "";
        consultaNC = "";
        consultaCorreo = "";
        consultaTelefono = "";
        consultaCiudad = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele)
    {
        currentSele = sele;
        JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["nit"] = nit;
            currentSele["razon_social"] = razon_social;
            currentSele["nombre_contacto"] = nombre_contacto;
            currentSele["correo"] = correo;
            currentSele["telefono"] = telefono;
            currentSele["ciudad"] = ciudad;
            <!-- FIN -->
 
            bool success;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/aliado", currentSele);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsync("api/proyecto/aliado/nit", nit, currentSele);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                nit = 0;
                razon_social = string.Empty;
                nombre_contacto = string.Empty;
                correo = string.Empty;
                telefono = string.Empty;
                ciudad = string.Empty;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la aliado. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar aliado: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el aliado. Por favor, intente nuevamente.");
        }
    }
 
    private async Task DeleteSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("nit", out var prmObj) && prmObj is int prmInt)
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/aliado/nit", prmInt);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Aliado eliminada con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el aliado. Por favor, intente nuevamente.");
                }
            }
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar aliado: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el aliado. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/aliado/nit/{consultaNit}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consultaRS = seleConsultada["razon_social"]?.ToString() ?? "";
                consultaNC = seleConsultada["nombre_contacto"]?.ToString() ?? "";
                consultaCorreo = seleConsultada["correo"]?.ToString() ?? "";
                consultaTelefono = seleConsultada["telefono"]?.ToString() ?? "";
                consultaCiudad = seleConsultada["ciudad"]?.ToString() ?? "";
                seleEncontrada = true;
            }
            else
            {
                consultaRS = "";
                consultaNC = "";
                consultaCorreo = "";
                consultaTelefono = "";
                consultaCiudad = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningun aliado con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar aliado: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el aliado. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["nit"] = consultaNit,
            ["razon_social"] = consultaRS,
            ["nombre_contacto"] = consultaNC,
            ["correo"] = consultaCorreo,
            ["telefono"] = consultaTelefono,
            ["ciudad"] = consultaCiudad
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }

    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
            ["nit"] = consultaNit,
            ["razon_social"] = consultaRS,
            ["nombre_contacto"] = consultaNC,
            ["correo"] = consultaCorreo,
            ["telefono"] = consultaTelefono,
            ["ciudad"] = consultaCiudad
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }
}