@page "/intereses_futuros"
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="container-xl mt-4">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title bg-dark text-white p-3 rounded">
                <div class="row">
                    <div class="col-sm-6">
                        <h2 class="m-0">Gestionar <b>Intereses Futuros</b></h2>
                    </div>
                    <div class="col-sm-6 text-end">
                        <a href="#addModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Interes</span>
                        </a>
                        <a href="#consultarModal" class="btn btn-info" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Interes</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (listado == null)
            {
                <p class="text-center">Cargando...</p>
            }
            else if (!listado.Any())
            {
                <p class="text-center">No hay Intereses registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover mt-3">
                    <thead class="table-secondary">
                        <tr>
                            <th>docente</th>
                            <th>termino_clave</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado)
                        {
                            <tr>
                                <td>@sele["docente"]</td>
                                <td>@sele["termino_clave"]</td>
                                <td>
                                    <a href="#editModal" class="edit text-warning" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#deleteModal" class="delete text-danger" data-bs-toggle="modal" @onclick="() => SetSeleToDelete(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal Añadir/Editar -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSele" OnValidSubmit="SaveSele">
                <DataAnnotationsValidator />
                <div class="modal-header bg-dark text-white">
                    <h5 class="modal-title" id="addModalLabel">@(isNewSele ? "Añadir" : "Editar") Red</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label>docente</label>
                        <InputNumber class="form-control" @bind-Value="docente" />
                        <ValidationMessage For="@(() => docente)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>termino_clave</label>
                        <InputText class="form-control" @bind-Value="termino_clave" />
                        <ValidationMessage For="@(() => termino_clave)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">@(isNewSele ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal Eliminar -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Interes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este Interes?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSele">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Consultar -->
<div class="modal fade" id="consultarModal" tabindex="-1" role="dialog" aria-labelledby="consultarModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="consultarModalLabel">Consultar Interes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label>docente</label>
                    <input type="text" class="form-control" @bind="consultadocente" @bind:event="oninput" />
                </div>
                <div class="form-group mb-3">
                    <label>termino_clave</label>
                    <input type="text" class="form-control" @bind="consultatermino_clave" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSele">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSeleConsultada" disabled="@(!seleEncontrada)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSeleConsultada" disabled="@(!seleEncontrada)">Eliminar</button>
            </div>
        </div>
    </div>
</div>


@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;

    <!-- CAMBIAR EN CADA TABLA -->
    private int docente;
    private string termino_clave = "";
    

    private string consultadocente = "";
    private string consultatermino_clave = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/intereses_futuros");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar intereses: {ex.Message}");
            Console.WriteLine($"Error al cargar intereses: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar intereses: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        docente = currentSele.TryGetValue("docente", out var i) ? Convert.ToInt32(i) : 0;
        termino_clave = currentSele.TryGetValue("termino_clave", out var n) ? n?.ToString() ?? "" : "";
        <!-- FIN -->
       
        JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consultadocente = "";
        consultatermino_clave = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele)
    {
        currentSele = sele;
        JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["docente"] = docente;
            currentSele["termino_clave"] = termino_clave;
            <!-- FIN -->
 
            bool success;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/intereses_futuros", currentSele);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsync("api/proyecto/intereses_futuros/docente", docente, currentSele);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                docente = 0;
                termino_clave = string.Empty;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la Interes. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar intereses: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar los intereses. Por favor, intente nuevamente.");
        }
    }
 
    private async Task DeleteSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("docente", out var prmObj) && prmObj is int prmInt)
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/intereses_futuros/docente", prmInt);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "interes eliminado con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la intereses. Por favor, intente nuevamente.");
                }
            }
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar interes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la interes. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/intereses_futuros/docente/{consultadocente}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consultatermino_clave = seleConsultada["termino_clave"]?.ToString() ?? "";
                seleEncontrada = true;
            }
            else
            {
                consultatermino_clave = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna interes con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar interes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar los interes. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["docente"] = consultadocente,
            ["termino_clave"] = consultatermino_clave,
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }

    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
            ["docente"] = consultadocente,
            ["termino_clave"] = consultatermino_clave,
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }
}