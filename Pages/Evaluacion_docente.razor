@page "/evaluacion_docente"
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="container-xl mt-4">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title bg-dark text-white p-3 rounded">
                <div class="row">
                    <div class="col-sm-6">
                        <h2 class="m-0">Gestionar <b>Evaluacion_docente</b></h2>
                    </div>
                    <div class="col-sm-6 text-end">
                        <a href="#addModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nueva Evaluacion_docente</span>
                        </a>
                        <a href="#consultarModal" class="btn btn-info" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Evaluacion_docente</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (listado == null)
            {
                <p class="text-center">Cargando...</p>
            }
            else if (!listado.Any())
            {
                <p class="text-center">No hay Evaluacion_docente registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover mt-3">
                    <thead class="table-secondary">
                        <tr>
                            <th>ID</th>
                            <th>Calificacion</th>
                            <th>Semestre</th>
                            <th>Docente</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado)
                        {
                            <tr>
                                <td>@sele["ID"]</td>
                                <td>@sele["Calificacion"]</td>
                                <td>@sele["Semestre"]</td>
                                <td>@sele["Docente"]</td>
                                <td>
                                    <a href="#editModal" class="edit text-warning" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#deleteModal" class="delete text-danger" data-bs-toggle="modal" @onclick="() => SetSeleToDelete(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal Añadir/Editar -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSele" OnValidSubmit="SaveSele">
                <DataAnnotationsValidator />
                <div class="modal-header bg-dark text-white">
                    <h5 class="modal-title" id="addModalLabel">@(isNewSele ? "Añadir" : "Editar") Evaluacion_docente</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label>ID</label>
                        <InputNumber class="form-control" @bind-Value="ID" />
                        <ValidationMessage For="@(() => ID)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Calificacion</label>
                        <InputNumber class="form-control" @bind-Value="Calificacion" />
                        <ValidationMessage For="@(() => Calificacion)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Semestre</label>
                        <InputText class="form-control" @bind-Value="Semestre" />
                        <ValidationMessage For="@(() => Semestre)" />
                    </div>
                    <div class="form-group mb-3">
                        <label>Docente</label>
                        <InputNumber class="form-control" @bind-Value="Docente" />
                        <ValidationMessage For="@(() => Docente)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">@(isNewSele ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal Eliminar -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Evaluacion_docente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta Evaluacion_docente?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSele">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Consultar -->
<div class="modal fade" id="consultarModal" tabindex="-1" role="dialog" aria-labelledby="consultarModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="consultarModalLabel">Consultar Evaluacion_docente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label>ID</label>
                    <input type="text" class="form-control" @bind="consultaID" @bind:event="oninput" />
                </div>
                <div class="form-group mb-3">
                    <label>Calificacion</label>
                    <input type="text" class="form-control" @bind="consultaCalificacion" readonly />
                </div>
                <div class="form-group mb-3">
                    <label>Semestre</label>
                    <input type="text" class="form-control" @bind="consultaSemestre" readonly />
                </div>
                <div class="form-group mb-3">
                    <label>Docente</label>
                    <input type="text" class="form-control" @bind="consultaDocente" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSele">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSeleConsultada" disabled="@(!seleEncontrada)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSeleConsultada" disabled="@(!seleEncontrada)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;

    <!-- CAMBIAR EN CADA TABLA -->
    private int ID;
    private float Calificacion = 0.0f;
    private string Semestre = "";
    private int Docente;

    private string consultaID = "";
    private string consultaCalificacion = "";
    private string consultaSemestre = "";
    private string consultaDocente = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/evaluacion_docente");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar Evaluacion Docente: {ex.Message}");
            Console.WriteLine($"Error al cargar Evaluacion Docente: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar Evaluacion Docente: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        ID = currentSele.TryGetValue("ID", out var i) ? Convert.ToInt32(i) : 0;
        float Calificacion = currentSele.TryGetValue("nombre", out var n) && n is float value ? value : 0.0f;
        Semestre = currentSele.TryGetValue("Semestre", out var u) ? u?.ToString() ?? "" : "";
        Docente = currentSele.TryGetValue("Docente", out var p) ? Convert.ToInt32(p) : 0;
        <!-- FIN -->
       
        JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consultaID = "";
        consultaCalificacion = "";
        consultaSemestre = "";
        consultaDocente = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele)
    {
        currentSele = sele;
        JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["ID"] = ID;
            currentSele["Calificacion"] = Calificacion;
            currentSele["Semestre"] = Semestre;
            currentSele["Docente"] = Docente;
            <!-- FIN -->
 
            bool success;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/evaluacion_docente", currentSele);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsync("api/proyecto/evaluacion_docente/ID", ID, currentSele);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                ID = 0;
                float Calificacion = 0.0f;
                Semestre = string.Empty;
                Docente = 0;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la Evaluacion Docente. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar red: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la Evaluacion Docente. Por favor, intente nuevamente.");
        }
    }
 
    private async Task DeleteSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("ID", out var prmObj) && prmObj is int prmInt)
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/evaluacion_docente/ID", prmInt);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Evalucaion Docente eliminada con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la Evalucaion Docente. Por favor, intente nuevamente.");
                }
            }
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar Evalucaion Docente: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la Evalucaion Docented. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/evaluacion_docente/ID/{consultaID}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consultaCalificacion = seleConsultada["calificacion"]?.ToString() ?? "";
                consultaSemestre = seleConsultada["semestre"]?.ToString() ?? "";
                consultaDocente = seleConsultada["docente"]?.ToString() ?? "";
                seleEncontrada = true;
            }
            else
            {
                consultaCalificacion = "";
                consultaSemestre = "";
                consultaDocente = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna Evaluacion Docente con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar Evaluacion Docente: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar la Evaluacion Docente. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["ID"] = consultaID,
            ["Calificacion"] = consultaCalificacion,
            ["Semestre"] = consultaSemestre,
            ["Docente"] = consultaDocente
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }

    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
             ["ID"] = consultaID,
            ["Calificacion"] = consultaCalificacion,
            ["Semestre"] = consultaSemestre,
            ["Docente"] = consultaDocente
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }
}