@page "/docente_departamento"
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Docente Departamento</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#addModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Docente Departamento</span>
                        </a>
 
                        <a href="#consultarModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Docente Departamento</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (listado == null)
            {
                <p>Cargando...</p>
            }
            else if (!listado.Any())
            {
                <p>No hay Docente Departamento registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <!-- CAMBIAR EN CADA TABLA -->
                            <th>Docente</th>
                            <th>Departamento</th>
                            <th>Dedicacion</th>
                            <th>Modalidad</th>
                            <th>Fecha_ingreso</th>
                            <th>Fecha_salida</th>
                            <!-- FIN -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado)
                        {
                            <tr>
                                <!-- CAMBIAR EN CADA TABLA -->
                                <td>@sele["Docente"]</td>
                                <td>@sele["Departamento"]</td>
                                <td>@sele["Dedicacion"]</td>
                                <td>@sele["Modalidad"]</td>
                                <td>@sele["Fecha_ingreso"]</td>
                                <td>@sele["Fecha_salida"]</td>
                                <!-- FIN -->
                                <td>
                                    <a href="#editModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
 
                                    <a href="#deleteModal" class="delete" data-bs-toggle="modal" @onclick="() => SetSeleToDelete(sele)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSele" OnValidSubmit="SaveSele">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="addModalLabel">@(isNewSele ? "Añadir" : "Editar") Docente_departamento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- CAMBIAR EN CADA TABLA -->
                    <div class="form-group">
                        <label>Docente</label>
                        <InputNumber class="form-control" @bind-Value="Docente" />
                        <ValidationMessage For="@(() => Docente)" />
                    </div>
                    <div class="form-group">
                        <label>Departamento</label>
                        <InputNumber class="form-control" @bind-Value="Departamento" />
                        <ValidationMessage For="@(() => Departamento)" />
                    </div>
                    <div class="form-group">
                        <label>Dedicacion</label>
                        <InputText class="form-control" @bind-Value="Dedicacion" />
                        <ValidationMessage For="@(() => Dedicacion)" />
                    </div>
                    <div class="form-group">
                        <label>Modalidad</label>
                        <InputText class="form-control" @bind-Value="Modalidad" />
                        <ValidationMessage For="@(() => Modalidad)" />
                    </div>
                    <div class="form-group">
                        <label>Fecha_ingreso</label>
                        <InputDate class="form-control" @bind-Value="Fecha_ingreso" />
                        <ValidationMessage For="@(() => Fecha_ingreso)" />
                    </div>
                    <div class="form-group">
                        <label>Fecha_salida</label>
                        <InputDate class="form-control" @bind-Value="Fecha_salida" />
                        <ValidationMessage For="@(() => Fecha_salida)" />
                    </div>
                    <!-- FIN -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewSele ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Docente_departamento</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este Docente_departamento?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSele">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="consultarModal" tabindex="-1" role="dialog" aria-labelledby="consultarModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarModalLabel">Consultar Docente_departamento</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- CAMBIAR EN CADA TABLA -->
                <div class="form-group">
                    <label>Docente</label>
                    <input type="text" class="form-control" @bind="consultaDocente" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Departamento</label>
                    <input type="text" class="form-control" @bind="consultaDepartamento" readonly />
                </div>
                <div class="form-group">
                    <label>Dedicacion</label>
                    <input type="text" class="form-control" @bind="consultaDedicacion" readonly />
                </div>
                <div class="form-group">
                    <label>Modalidad</label>
                    <input type="text" class="form-control" @bind="consultaModalidad" readonly />
                </div>
                <div class="form-group">
                    <label>Fecha_ingreso</label>
                    <input type="text" class="form-control" @bind="consultaFecha_ingreso" readonly />
                </div>
                <div class="form-group">
                    <label>Fecha_salida</label>
                    <input type="text" class="form-control" @bind="consultaFecha_salida" readonly />
                </div>
                <!-- FIN -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSele">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSeleConsultada" disabled="@(!seleEncontrada)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSeleConsultada" disabled="@(!seleEncontrada)">Eliminar</button>
            </div>
        </div>
    </div>
</div>


@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;

    <!-- CAMBIAR EN CADA TABLA -->
    private int Docente;
    private int Departamento;
    private string Dedicacion = "";
    private string Modalidad = "";
    private DateTime? Fecha_ingreso;
    private DateTime? Fecha_salida;

    private string consultaDocente = "";
    private string consultaDepartamento = "";
    private string consultaDedicacion = "";
    private string consultaModalidad = "";
    private string consultaFecha_ingreso = "";
    private string consultaFecha_salida = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/docente_departamento");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar Docente departamento: {ex.Message}");
            Console.WriteLine($"Error al cargar Docente departamento: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar Docente departamento: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        Docente = currentSele.TryGetValue("docente", out var i) ? Convert.ToInt32(i) : 0;
        Departamento = currentSele.TryGetValue("departamento", out var t) ? Convert.ToInt32(t) : 0;
        Dedicacion = currentSele.TryGetValue("dedicacion", out var n) ? n?.ToString() ?? "" : "";
        Modalidad = currentSele.TryGetValue("modalidad", out var u) ? u?.ToString() ?? "" : "";
        Fecha_ingreso = currentSele.TryGetValue("fecha_ingreso", out var p) ? Convert.ToDateTime(p) : default(DateTime);
        Fecha_salida = currentSele.TryGetValue("fecha_salida", out var l) ? Convert.ToDateTime(l) : default(DateTime);
        <!-- FIN -->
       
        JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consultaDocente = "";
        consultaDepartamento = "";
        consultaDedicacion = "";
        consultaModalidad = "";
        consultaFecha_ingreso = "";
        consultaFecha_salida = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele)
    {
        currentSele = sele;
        JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["Docente"] = Docente;
            currentSele["Departamento"] = Departamento;
            currentSele["Dedicacion"] = Dedicacion;
            currentSele["Modalidad"] = Modalidad;
            currentSele["Fecha_ingreso"] = Fecha_ingreso;
            currentSele["Fecha_salida"] = Fecha_salida;
            <!-- FIN -->
 
            bool success;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/docente_departamento", currentSele);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsync("api/proyecto/docente_departamento/Docente", Docente, currentSele);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                Docente = 0;
                Departamento = 0;
                Dedicacion = string.Empty;
                Modalidad = string.Empty;
                Fecha_ingreso = DateTime.MinValue;
                Fecha_salida = DateTime.MinValue;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la Docente Departamento. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar Docente Departamento: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la Docente Departamento. Por favor, intente nuevamente.");
        }
    }
 
    private async Task DeleteSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("Docente", out var prmObj) && prmObj is int prmInt)
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/docente_departamento/Docente", prmInt);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Docente Departamento eliminada con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la Docente Departamento. Por favor, intente nuevamente.");
                }
            }
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar beca: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la Docente Departamento. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/docente_departamento/Docente/{consultaDocente}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consultaDepartamento = seleConsultada["Departamento"]?.ToString() ?? "";
                consultaDedicacion = seleConsultada["Dedicacion"]?.ToString() ?? "";
                consultaModalidad = seleConsultada["Modalidad"]?.ToString() ?? "";
                consultaFecha_ingreso = seleConsultada["Fecha_ingreso"]?.ToString() ?? "";
                consultaFecha_salida = seleConsultada["Fecha_salida"]?.ToString() ?? "";
                seleEncontrada = true;
            }
            else
            {
                consultaDepartamento = "";
                consultaDedicacion = "";
                consultaModalidad = "";
                consultaFecha_ingreso = "";
                consultaFecha_salida = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna Docente Departamento con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar Docente Departamento : {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar la Docente Departamento . Por favor, intente nuevamente.");
        }
    }
 
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["Docente"] = consultaDocente,
            ["Departamento"] = consultaDepartamento,
            ["Dedicacion"] = consultaDedicacion,
            ["Modalidad"] = consultaModalidad,
            ["Fecha_ingreso"] = consultaFecha_ingreso,
            ["Fecha_salida"] = consultaFecha_salida
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }

    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
            ["Docente"] = consultaDocente,
            ["Departamento"] = consultaDepartamento,
            ["Dedicacion"] = consultaDedicacion,
            ["Modalidad"] = consultaModalidad,
            ["Fecha_ingreso"] = consultaFecha_ingreso,
            ["Fecha_salida"] = consultaFecha_salida
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
    }
}